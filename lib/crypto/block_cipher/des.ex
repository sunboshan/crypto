defmodule Crypto.BlockCipher.DES do
  @moduledoc """
  Implement DES block cipher according to FIPS 46-3.
  """

  import Bitwise

  @ks_rotation [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]
  @s {
    # s-box 1
    {{14, 04, 13, 01, 02, 15, 11, 08, 03, 10, 06, 12, 05, 09, 00, 07},
     {00, 15, 07, 04, 14, 02, 13, 01, 10, 06, 12, 11, 09, 05, 03, 08},
     {04, 01, 14, 08, 13, 06, 02, 11, 15, 12, 09, 07, 03, 10, 05, 00},
     {15, 12, 08, 02, 04, 09, 01, 07, 05, 11, 03, 14, 10, 00, 06, 13}},
    # s-box 2
    {{15, 01, 08, 14, 06, 11, 03, 04, 09, 07, 02, 13, 12, 00, 05, 10},
     {03, 13, 04, 07, 15, 02, 08, 14, 12, 00, 01, 10, 06, 09, 11, 05},
     {00, 14, 07, 11, 10, 04, 13, 01, 05, 08, 12, 06, 09, 03, 02, 15},
     {13, 08, 10, 01, 03, 15, 04, 02, 11, 06, 07, 12, 00, 05, 14, 09}},
    # s-box 3
    {{10, 00, 09, 14, 06, 03, 15, 05, 01, 13, 12, 07, 11, 04, 02, 08},
     {13, 07, 00, 09, 03, 04, 06, 10, 02, 08, 05, 14, 12, 11, 15, 01},
     {13, 06, 04, 09, 08, 15, 03, 00, 11, 01, 02, 12, 05, 10, 14, 07},
     {01, 10, 13, 00, 06, 09, 08, 07, 04, 15, 14, 03, 11, 05, 02, 12}},
    # s-box 4
    {{07, 13, 14, 03, 00, 06, 09, 10, 01, 02, 08, 05, 11, 12, 04, 15},
     {13, 08, 11, 05, 06, 15, 00, 03, 04, 07, 02, 12, 01, 10, 14, 09},
     {10, 06, 09, 00, 12, 11, 07, 13, 15, 01, 03, 14, 05, 02, 08, 04},
     {03, 15, 00, 06, 10, 01, 13, 08, 09, 04, 05, 11, 12, 07, 02, 14}},
    # s-box 5
    {{02, 12, 04, 01, 07, 10, 11, 06, 08, 05, 03, 15, 13, 00, 14, 09},
     {14, 11, 02, 12, 04, 07, 13, 01, 05, 00, 15, 10, 03, 09, 08, 06},
     {04, 02, 01, 11, 10, 13, 07, 08, 15, 09, 12, 05, 06, 03, 00, 14},
     {11, 08, 12, 07, 01, 14, 02, 13, 06, 15, 00, 09, 10, 04, 05, 03}},
    # s-box 6
    {{12, 01, 10, 15, 09, 02, 06, 08, 00, 13, 03, 04, 14, 07, 05, 11},
     {10, 15, 04, 02, 07, 12, 09, 05, 06, 01, 13, 14, 00, 11, 03, 08},
     {09, 14, 15, 05, 02, 08, 12, 03, 07, 00, 04, 10, 01, 13, 11, 06},
     {04, 03, 02, 12, 09, 05, 15, 10, 11, 14, 01, 07, 06, 00, 08, 13}},
    # s-box 7
    {{04, 11, 02, 14, 15, 00, 08, 13, 03, 12, 09, 07, 05, 10, 06, 01},
     {13, 00, 11, 07, 04, 09, 01, 10, 14, 03, 05, 12, 02, 15, 08, 06},
     {01, 04, 11, 13, 12, 03, 07, 14, 10, 15, 06, 08, 00, 05, 09, 02},
     {06, 11, 13, 08, 01, 04, 10, 07, 09, 05, 00, 15, 14, 02, 03, 12}},
    # s-box 8
    {{13, 02, 08, 04, 06, 15, 11, 01, 10, 09, 03, 14, 05, 00, 12, 07},
     {01, 15, 13, 08, 10, 03, 07, 04, 12, 05, 06, 11, 00, 14, 09, 02},
     {07, 11, 04, 01, 09, 12, 14, 02, 00, 06, 10, 13, 15, 03, 05, 08},
     {02, 01, 14, 07, 04, 10, 08, 13, 15, 12, 09, 00, 03, 05, 06, 11}},
  }

  @doc """
  Encrypt a giving 64-bit binary with 64-bit key using DES.

  Example:

      iex> DES.encrypt("12345678", "abcdefgh")
      <<148, 212, 67, 107, 195, 181, 182, 147>>
  """
  @spec encrypt(<<_::64>>, <<_::64>>) :: <<_::64>>
  def encrypt(key, binary) when bit_size(key) == 64 and bit_size(binary) == 64 do
    do_encrypt(:enc, key, binary)
  end
  def encrypt(_, _), do: raise ArgumentError

  @doc """
  Decrypt a giving encrypted 64-bit binary with key using DES.

  Example:

      iex> DES.decrypt("12345678", <<148, 212, 67, 107, 195, 181, 182, 147>>)
      "abcdefgh"
  """
  @spec decrypt(<<_::64>>, <<_::64>>) :: <<_::64>>
  def decrypt(key, binary) when bit_size(key) == 64 and bit_size(binary) == 64 do
    do_encrypt(:dec, key, binary)
  end
  def decrypt(_, _), do: raise ArgumentError

  @spec do_encrypt(:enc | :dec, <<_::64>>, <<_::64>>) :: <<_::64>>
  defp do_encrypt(mode, key, binary) do
    subkeys = case mode do
      :enc -> subkeys(key)
      :dec -> Enum.reverse(subkeys(key))
    end
    {<<l::32, r::32>>, []} = Enum.reduce(1..16, {ip(binary), subkeys}, fn _, {<<l::32, r::32>>, [k | t]} ->
      <<ff::32>> = f(<<r::32>>, k)
      ll = r
      rr = l ^^^ ff
      {<<ll::32, rr::32>>, t}
    end)
    ip_1(<<r::32, l::32>>)
  end

  # initial permutation
  @spec ip(<<_::64>>) :: <<_::64>>
  defp ip(binary) do
    <<b01::1, b02::1, b03::1, b04::1, b05::1, b06::1, b07::1, b08::1,
      b09::1, b10::1, b11::1, b12::1, b13::1, b14::1, b15::1, b16::1,
      b17::1, b18::1, b19::1, b20::1, b21::1, b22::1, b23::1, b24::1,
      b25::1, b26::1, b27::1, b28::1, b29::1, b30::1, b31::1, b32::1,
      b33::1, b34::1, b35::1, b36::1, b37::1, b38::1, b39::1, b40::1,
      b41::1, b42::1, b43::1, b44::1, b45::1, b46::1, b47::1, b48::1,
      b49::1, b50::1, b51::1, b52::1, b53::1, b54::1, b55::1, b56::1,
      b57::1, b58::1, b59::1, b60::1, b61::1, b62::1, b63::1, b64::1>> = binary
    <<b58::1, b50::1, b42::1, b34::1, b26::1, b18::1, b10::1, b02::1,
      b60::1, b52::1, b44::1, b36::1, b28::1, b20::1, b12::1, b04::1,
      b62::1, b54::1, b46::1, b38::1, b30::1, b22::1, b14::1, b06::1,
      b64::1, b56::1, b48::1, b40::1, b32::1, b24::1, b16::1, b08::1,
      b57::1, b49::1, b41::1, b33::1, b25::1, b17::1, b09::1, b01::1,
      b59::1, b51::1, b43::1, b35::1, b27::1, b19::1, b11::1, b03::1,
      b61::1, b53::1, b45::1, b37::1, b29::1, b21::1, b13::1, b05::1,
      b63::1, b55::1, b47::1, b39::1, b31::1, b23::1, b15::1, b07::1>>
  end

  # final permutation
  @spec ip_1(<<_::64>>) :: <<_::64>>
  defp ip_1(binary) do
    <<b01::1, b02::1, b03::1, b04::1, b05::1, b06::1, b07::1, b08::1,
      b09::1, b10::1, b11::1, b12::1, b13::1, b14::1, b15::1, b16::1,
      b17::1, b18::1, b19::1, b20::1, b21::1, b22::1, b23::1, b24::1,
      b25::1, b26::1, b27::1, b28::1, b29::1, b30::1, b31::1, b32::1,
      b33::1, b34::1, b35::1, b36::1, b37::1, b38::1, b39::1, b40::1,
      b41::1, b42::1, b43::1, b44::1, b45::1, b46::1, b47::1, b48::1,
      b49::1, b50::1, b51::1, b52::1, b53::1, b54::1, b55::1, b56::1,
      b57::1, b58::1, b59::1, b60::1, b61::1, b62::1, b63::1, b64::1>> = binary
    <<b40::1, b08::1, b48::1, b16::1, b56::1, b24::1, b64::1, b32::1,
      b39::1, b07::1, b47::1, b15::1, b55::1, b23::1, b63::1, b31::1,
      b38::1, b06::1, b46::1, b14::1, b54::1, b22::1, b62::1, b30::1,
      b37::1, b05::1, b45::1, b13::1, b53::1, b21::1, b61::1, b29::1,
      b36::1, b04::1, b44::1, b12::1, b52::1, b20::1, b60::1, b28::1,
      b35::1, b03::1, b43::1, b11::1, b51::1, b19::1, b59::1, b27::1,
      b34::1, b02::1, b42::1, b10::1, b50::1, b18::1, b58::1, b26::1,
      b33::1, b01::1, b41::1, b09::1, b49::1, b17::1, b57::1, b25::1>>
  end

  @spec subkeys(<<_::64>>) :: [<<_::48>>]
  defp subkeys(key) do
    Stream.unfold({@ks_rotation, pc1(key)}, fn {[n | t], <<c::28, d::28>>} ->
      key = <<brl(c, n)::28, brl(d, n)::28>>
      {pc2(key), {t, key}}
    end)
    |> Enum.take(16)
  end

  # feistel function
  @spec f(<<_::32>>, <<_::48>>) :: <<_::32>>
  defp f(right, <<key::48>>) do
    <<expand::48>> = e(right)
    (for <<b::6 <- <<(key ^^^ expand)::48>> >>, do: <<b::6>>)
    |> Enum.with_index()
    |> Enum.reduce(<<>>, fn {<<c1::1, c::4, c2::1>>, i}, acc ->
      v = get_in(@s, [Access.elem(i), Access.elem(c1 * 2 + c2), Access.elem(c)])
      <<acc::bits, v::4>>
    end)
    |> p()
  end

  # expansion function
  @spec e(<<_::32>>) :: <<_::48>>
  defp e(binary) do
    <<b01::1, b02::1, b03::1, b04::1, b05::1, b06::1, b07::1, b08::1,
      b09::1, b10::1, b11::1, b12::1, b13::1, b14::1, b15::1, b16::1,
      b17::1, b18::1, b19::1, b20::1, b21::1, b22::1, b23::1, b24::1,
      b25::1, b26::1, b27::1, b28::1, b29::1, b30::1, b31::1, b32::1>> = binary
    <<b32::1, b01::1, b02::1, b03::1, b04::1, b05::1,
      b04::1, b05::1, b06::1, b07::1, b08::1, b09::1,
      b08::1, b09::1, b10::1, b11::1, b12::1, b13::1,
      b12::1, b13::1, b14::1, b15::1, b16::1, b17::1,
      b16::1, b17::1, b18::1, b19::1, b20::1, b21::1,
      b20::1, b21::1, b22::1, b23::1, b24::1, b25::1,
      b24::1, b25::1, b26::1, b27::1, b28::1, b29::1,
      b28::1, b29::1, b30::1, b31::1, b32::1, b01::1>>
  end

  # permuation function
  @spec p(<<_::32>>) :: <<_::32>>
  defp p(binary) do
    <<b01::1, b02::1, b03::1, b04::1, b05::1, b06::1, b07::1, b08::1,
      b09::1, b10::1, b11::1, b12::1, b13::1, b14::1, b15::1, b16::1,
      b17::1, b18::1, b19::1, b20::1, b21::1, b22::1, b23::1, b24::1,
      b25::1, b26::1, b27::1, b28::1, b29::1, b30::1, b31::1, b32::1>> = binary
    <<b16::1, b07::1, b20::1, b21::1,
      b29::1, b12::1, b28::1, b17::1,
      b01::1, b15::1, b23::1, b26::1,
      b05::1, b18::1, b31::1, b10::1,
      b02::1, b08::1, b24::1, b14::1,
      b32::1, b27::1, b03::1, b09::1,
      b19::1, b13::1, b30::1, b06::1,
      b22::1, b11::1, b04::1, b25::1>>
  end

  # permuated choice 1
  @spec pc1(<<_::64>>) :: <<_::56>>
  defp pc1(key) do
    <<b01::1, b02::1, b03::1, b04::1, b05::1, b06::1, b07::1, _::1,
      b09::1, b10::1, b11::1, b12::1, b13::1, b14::1, b15::1, _::1,
      b17::1, b18::1, b19::1, b20::1, b21::1, b22::1, b23::1, _::1,
      b25::1, b26::1, b27::1, b28::1, b29::1, b30::1, b31::1, _::1,
      b33::1, b34::1, b35::1, b36::1, b37::1, b38::1, b39::1, _::1,
      b41::1, b42::1, b43::1, b44::1, b45::1, b46::1, b47::1, _::1,
      b49::1, b50::1, b51::1, b52::1, b53::1, b54::1, b55::1, _::1,
      b57::1, b58::1, b59::1, b60::1, b61::1, b62::1, b63::1, _::1>> = key
    <<b57::1, b49::1, b41::1, b33::1, b25::1, b17::1, b09::1,
      b01::1, b58::1, b50::1, b42::1, b34::1, b26::1, b18::1,
      b10::1, b02::1, b59::1, b51::1, b43::1, b35::1, b27::1,
      b19::1, b11::1, b03::1, b60::1, b52::1, b44::1, b36::1,
      b63::1, b55::1, b47::1, b39::1, b31::1, b23::1, b15::1,
      b07::1, b62::1, b54::1, b46::1, b38::1, b30::1, b22::1,
      b14::1, b06::1, b61::1, b53::1, b45::1, b37::1, b29::1,
      b21::1, b13::1, b05::1, b28::1, b20::1, b12::1, b04::1>>
  end

  # permuated choice 2
  @spec pc2(<<_::56>>) :: <<_::48>>
  defp pc2(key) do
    <<b01::1, b02::1, b03::1, b04::1, b05::1, b06::1, b07::1, b08::1,
      _09::1, b10::1, b11::1, b12::1, b13::1, b14::1, b15::1, b16::1,
      b17::1, _18::1, b19::1, b20::1, b21::1, _22::1, b23::1, b24::1,
      _25::1, b26::1, b27::1, b28::1, b29::1, b30::1, b31::1, b32::1,
      b33::1, b34::1, _35::1, b36::1, b37::1, _38::1, b39::1, b40::1,
      b41::1, b42::1, _43::1, b44::1, b45::1, b46::1, b47::1, b48::1,
      b49::1, b50::1, b51::1, b52::1, b53::1, _54::1, b55::1, b56::1>> = key
    <<b14::1, b17::1, b11::1, b24::1, b01::1, b05::1,
      b03::1, b28::1, b15::1, b06::1, b21::1, b10::1,
      b23::1, b19::1, b12::1, b04::1, b26::1, b08::1,
      b16::1, b07::1, b27::1, b20::1, b13::1, b02::1,
      b41::1, b52::1, b31::1, b37::1, b47::1, b55::1,
      b30::1, b40::1, b51::1, b45::1, b33::1, b48::1,
      b44::1, b49::1, b39::1, b56::1, b34::1, b53::1,
      b46::1, b42::1, b50::1, b36::1, b29::1, b32::1>>
  end

  # binary rotate left
  defp brl(num, n) do
    ((num <<< n) ||| (num >>> (28 - n))) &&& 0xfffffff
  end
end
